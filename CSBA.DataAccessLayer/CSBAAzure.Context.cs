//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CSBA.DataAccessLayer
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CSBAAzureEntities : DbContext
    {
        public CSBAAzureEntities()
            : base("name=CSBAAzureEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Player> Players { get; set; }
        public virtual DbSet<PlayerPosition> PlayerPositions { get; set; }
        public virtual DbSet<Position> Positions { get; set; }
        public virtual DbSet<PositionType> PositionTypes { get; set; }
        public virtual DbSet<Season> Seasons { get; set; }
        public virtual DbSet<SeasonPlayerRecycle> SeasonPlayerRecycles { get; set; }
        public virtual DbSet<SeasonTeam> SeasonTeams { get; set; }
        public virtual DbSet<SeasonTeamPlayer> SeasonTeamPlayers { get; set; }
        public virtual DbSet<SeasonTeamStadium> SeasonTeamStadiums { get; set; }
        public virtual DbSet<Stadium> Stadia { get; set; }
        public virtual DbSet<Stat> Stats { get; set; }
        public virtual DbSet<Team> Teams { get; set; }
        public virtual DbSet<Trade> Trades { get; set; }
        public virtual DbSet<TradeStatu> TradeStatus { get; set; }
        public virtual DbSet<TradeTeam> TradeTeams { get; set; }
        public virtual DbSet<TradeTeamDetail> TradeTeamDetails { get; set; }
        public virtual DbSet<SeasonPlayerPositionStat> SeasonPlayerPositionStats { get; set; }
        public virtual DbSet<v_SeasonTeam> v_SeasonTeam { get; set; }
        public virtual DbSet<v_SeasonTeamPlayerPosition> v_SeasonTeamPlayerPosition { get; set; }
        public virtual DbSet<v_SeasonView> v_SeasonView { get; set; }
        public virtual DbSet<v_Stat_Hitter_View> v_Stat_Hitter_View { get; set; }
        public virtual DbSet<v_Team_Draft_Roster> v_Team_Draft_Roster { get; set; }
        public virtual DbSet<aspnet_Users> aspnet_Users { get; set; }
    
        public virtual int sp_Player_Delete(Nullable<System.Guid> playerGUID)
        {
            var playerGUIDParameter = playerGUID.HasValue ?
                new ObjectParameter("PlayerGUID", playerGUID) :
                new ObjectParameter("PlayerGUID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Player_Delete", playerGUIDParameter);
        }
    
        public virtual ObjectResult<Nullable<System.Guid>> sp_Player_Insert(string playerName, byte[] playerImage)
        {
            var playerNameParameter = playerName != null ?
                new ObjectParameter("PlayerName", playerName) :
                new ObjectParameter("PlayerName", typeof(string));
    
            var playerImageParameter = playerImage != null ?
                new ObjectParameter("PlayerImage", playerImage) :
                new ObjectParameter("PlayerImage", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.Guid>>("sp_Player_Insert", playerNameParameter, playerImageParameter);
        }
    
        public virtual int sp_Player_Update(Nullable<System.Guid> playerGUID, string playerName, byte[] playerImage)
        {
            var playerGUIDParameter = playerGUID.HasValue ?
                new ObjectParameter("PlayerGUID", playerGUID) :
                new ObjectParameter("PlayerGUID", typeof(System.Guid));
    
            var playerNameParameter = playerName != null ?
                new ObjectParameter("PlayerName", playerName) :
                new ObjectParameter("PlayerName", typeof(string));
    
            var playerImageParameter = playerImage != null ?
                new ObjectParameter("PlayerImage", playerImage) :
                new ObjectParameter("PlayerImage", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Player_Update", playerGUIDParameter, playerNameParameter, playerImageParameter);
        }
    
        public virtual int sp_Position_Delete(Nullable<int> positionID, Nullable<int> positionTypeID)
        {
            var positionIDParameter = positionID.HasValue ?
                new ObjectParameter("PositionID", positionID) :
                new ObjectParameter("PositionID", typeof(int));
    
            var positionTypeIDParameter = positionTypeID.HasValue ?
                new ObjectParameter("PositionTypeID", positionTypeID) :
                new ObjectParameter("PositionTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Position_Delete", positionIDParameter, positionTypeIDParameter);
        }
    
        public virtual int sp_Position_Insert(Nullable<int> positionID, Nullable<int> positionTypeID, string positionName, Nullable<int> maxCount, string positionNameLong)
        {
            var positionIDParameter = positionID.HasValue ?
                new ObjectParameter("PositionID", positionID) :
                new ObjectParameter("PositionID", typeof(int));
    
            var positionTypeIDParameter = positionTypeID.HasValue ?
                new ObjectParameter("PositionTypeID", positionTypeID) :
                new ObjectParameter("PositionTypeID", typeof(int));
    
            var positionNameParameter = positionName != null ?
                new ObjectParameter("PositionName", positionName) :
                new ObjectParameter("PositionName", typeof(string));
    
            var maxCountParameter = maxCount.HasValue ?
                new ObjectParameter("MaxCount", maxCount) :
                new ObjectParameter("MaxCount", typeof(int));
    
            var positionNameLongParameter = positionNameLong != null ?
                new ObjectParameter("PositionNameLong", positionNameLong) :
                new ObjectParameter("PositionNameLong", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Position_Insert", positionIDParameter, positionTypeIDParameter, positionNameParameter, maxCountParameter, positionNameLongParameter);
        }
    
        public virtual int sp_Position_Update(Nullable<int> positionID, Nullable<int> positionTypeID, string positionName, Nullable<int> maxCount, string positionNameLong)
        {
            var positionIDParameter = positionID.HasValue ?
                new ObjectParameter("PositionID", positionID) :
                new ObjectParameter("PositionID", typeof(int));
    
            var positionTypeIDParameter = positionTypeID.HasValue ?
                new ObjectParameter("PositionTypeID", positionTypeID) :
                new ObjectParameter("PositionTypeID", typeof(int));
    
            var positionNameParameter = positionName != null ?
                new ObjectParameter("PositionName", positionName) :
                new ObjectParameter("PositionName", typeof(string));
    
            var maxCountParameter = maxCount.HasValue ?
                new ObjectParameter("MaxCount", maxCount) :
                new ObjectParameter("MaxCount", typeof(int));
    
            var positionNameLongParameter = positionNameLong != null ?
                new ObjectParameter("PositionNameLong", positionNameLong) :
                new ObjectParameter("PositionNameLong", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Position_Update", positionIDParameter, positionTypeIDParameter, positionNameParameter, maxCountParameter, positionNameLongParameter);
        }
    
        public virtual int sp_Team_Delete(Nullable<int> teamID)
        {
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Team_Delete", teamIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_Team_Insert(string teamName, string ownerName, string ownerEmail, Nullable<System.Guid> ownerUserID, byte[] teamImage)
        {
            var teamNameParameter = teamName != null ?
                new ObjectParameter("TeamName", teamName) :
                new ObjectParameter("TeamName", typeof(string));
    
            var ownerNameParameter = ownerName != null ?
                new ObjectParameter("OwnerName", ownerName) :
                new ObjectParameter("OwnerName", typeof(string));
    
            var ownerEmailParameter = ownerEmail != null ?
                new ObjectParameter("OwnerEmail", ownerEmail) :
                new ObjectParameter("OwnerEmail", typeof(string));
    
            var ownerUserIDParameter = ownerUserID.HasValue ?
                new ObjectParameter("OwnerUserID", ownerUserID) :
                new ObjectParameter("OwnerUserID", typeof(System.Guid));
    
            var teamImageParameter = teamImage != null ?
                new ObjectParameter("TeamImage", teamImage) :
                new ObjectParameter("TeamImage", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_Team_Insert", teamNameParameter, ownerNameParameter, ownerEmailParameter, ownerUserIDParameter, teamImageParameter);
        }
    
        public virtual int sp_Team_Update(Nullable<int> teamID, string teamName, string ownerName, Nullable<System.Guid> ownerUserID, string ownerEmail, byte[] teamImage)
        {
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(int));
    
            var teamNameParameter = teamName != null ?
                new ObjectParameter("TeamName", teamName) :
                new ObjectParameter("TeamName", typeof(string));
    
            var ownerNameParameter = ownerName != null ?
                new ObjectParameter("OwnerName", ownerName) :
                new ObjectParameter("OwnerName", typeof(string));
    
            var ownerUserIDParameter = ownerUserID.HasValue ?
                new ObjectParameter("OwnerUserID", ownerUserID) :
                new ObjectParameter("OwnerUserID", typeof(System.Guid));
    
            var ownerEmailParameter = ownerEmail != null ?
                new ObjectParameter("OwnerEmail", ownerEmail) :
                new ObjectParameter("OwnerEmail", typeof(string));
    
            var teamImageParameter = teamImage != null ?
                new ObjectParameter("TeamImage", teamImage) :
                new ObjectParameter("TeamImage", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Team_Update", teamIDParameter, teamNameParameter, ownerNameParameter, ownerUserIDParameter, ownerEmailParameter, teamImageParameter);
        }
    
        public virtual int sp_SeasonTeam_Delete(Nullable<int> seasonID, Nullable<int> teamID)
        {
            var seasonIDParameter = seasonID.HasValue ?
                new ObjectParameter("SeasonID", seasonID) :
                new ObjectParameter("SeasonID", typeof(int));
    
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SeasonTeam_Delete", seasonIDParameter, teamIDParameter);
        }
    
        public virtual int sp_SeasonTeam_DeleteAll(Nullable<int> seasonID)
        {
            var seasonIDParameter = seasonID.HasValue ?
                new ObjectParameter("SeasonID", seasonID) :
                new ObjectParameter("SeasonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SeasonTeam_DeleteAll", seasonIDParameter);
        }
    
        public virtual int sp_SeasonTeam_Insert(Nullable<int> seasonID, Nullable<int> teamID, Nullable<bool> activeFlg, Nullable<int> stadiumOrder)
        {
            var seasonIDParameter = seasonID.HasValue ?
                new ObjectParameter("SeasonID", seasonID) :
                new ObjectParameter("SeasonID", typeof(int));
    
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(int));
    
            var activeFlgParameter = activeFlg.HasValue ?
                new ObjectParameter("ActiveFlg", activeFlg) :
                new ObjectParameter("ActiveFlg", typeof(bool));
    
            var stadiumOrderParameter = stadiumOrder.HasValue ?
                new ObjectParameter("StadiumOrder", stadiumOrder) :
                new ObjectParameter("StadiumOrder", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SeasonTeam_Insert", seasonIDParameter, teamIDParameter, activeFlgParameter, stadiumOrderParameter);
        }
    
        public virtual int sp_SeasonTeam_Update(Nullable<int> seasonID, Nullable<int> teamID, Nullable<bool> activeFlg, Nullable<int> stadiumOrder)
        {
            var seasonIDParameter = seasonID.HasValue ?
                new ObjectParameter("SeasonID", seasonID) :
                new ObjectParameter("SeasonID", typeof(int));
    
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(int));
    
            var activeFlgParameter = activeFlg.HasValue ?
                new ObjectParameter("ActiveFlg", activeFlg) :
                new ObjectParameter("ActiveFlg", typeof(bool));
    
            var stadiumOrderParameter = stadiumOrder.HasValue ?
                new ObjectParameter("StadiumOrder", stadiumOrder) :
                new ObjectParameter("StadiumOrder", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SeasonTeam_Update", seasonIDParameter, teamIDParameter, activeFlgParameter, stadiumOrderParameter);
        }
    
        public virtual int sp_SeasonTeamPlayer_Delete(Nullable<int> seasonID, Nullable<int> teamID, Nullable<System.Guid> playerGUID)
        {
            var seasonIDParameter = seasonID.HasValue ?
                new ObjectParameter("SeasonID", seasonID) :
                new ObjectParameter("SeasonID", typeof(int));
    
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(int));
    
            var playerGUIDParameter = playerGUID.HasValue ?
                new ObjectParameter("PlayerGUID", playerGUID) :
                new ObjectParameter("PlayerGUID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SeasonTeamPlayer_Delete", seasonIDParameter, teamIDParameter, playerGUIDParameter);
        }
    
        public virtual int sp_SeasonTeamPlayer_Insert(Nullable<int> seasonID, Nullable<int> teamID, Nullable<System.Guid> playerGUID, Nullable<int> points)
        {
            var seasonIDParameter = seasonID.HasValue ?
                new ObjectParameter("SeasonID", seasonID) :
                new ObjectParameter("SeasonID", typeof(int));
    
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(int));
    
            var playerGUIDParameter = playerGUID.HasValue ?
                new ObjectParameter("PlayerGUID", playerGUID) :
                new ObjectParameter("PlayerGUID", typeof(System.Guid));
    
            var pointsParameter = points.HasValue ?
                new ObjectParameter("Points", points) :
                new ObjectParameter("Points", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SeasonTeamPlayer_Insert", seasonIDParameter, teamIDParameter, playerGUIDParameter, pointsParameter);
        }
    
        public virtual int sp_SeasonTeamPlayer_Update(Nullable<int> seasonID, Nullable<int> teamID, Nullable<System.Guid> playerGUID, Nullable<int> points)
        {
            var seasonIDParameter = seasonID.HasValue ?
                new ObjectParameter("SeasonID", seasonID) :
                new ObjectParameter("SeasonID", typeof(int));
    
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(int));
    
            var playerGUIDParameter = playerGUID.HasValue ?
                new ObjectParameter("PlayerGUID", playerGUID) :
                new ObjectParameter("PlayerGUID", typeof(System.Guid));
    
            var pointsParameter = points.HasValue ?
                new ObjectParameter("Points", points) :
                new ObjectParameter("Points", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SeasonTeamPlayer_Update", seasonIDParameter, teamIDParameter, playerGUIDParameter, pointsParameter);
        }
    
        public virtual int sp_Season_Clear(Nullable<int> seasonID)
        {
            var seasonIDParameter = seasonID.HasValue ?
                new ObjectParameter("SeasonID", seasonID) :
                new ObjectParameter("SeasonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Season_Clear", seasonIDParameter);
        }
    
        public virtual int sp_Season_Current(Nullable<int> seasonID)
        {
            var seasonIDParameter = seasonID.HasValue ?
                new ObjectParameter("SeasonID", seasonID) :
                new ObjectParameter("SeasonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Season_Current", seasonIDParameter);
        }
    
        public virtual int sp_Season_Delete(Nullable<int> seasonID)
        {
            var seasonIDParameter = seasonID.HasValue ?
                new ObjectParameter("SeasonID", seasonID) :
                new ObjectParameter("SeasonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Season_Delete", seasonIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_Season_Insert(string seasonName, Nullable<System.DateTime> draftDate, Nullable<int> startPoints, Nullable<int> minBid, Nullable<bool> active)
        {
            var seasonNameParameter = seasonName != null ?
                new ObjectParameter("SeasonName", seasonName) :
                new ObjectParameter("SeasonName", typeof(string));
    
            var draftDateParameter = draftDate.HasValue ?
                new ObjectParameter("DraftDate", draftDate) :
                new ObjectParameter("DraftDate", typeof(System.DateTime));
    
            var startPointsParameter = startPoints.HasValue ?
                new ObjectParameter("StartPoints", startPoints) :
                new ObjectParameter("StartPoints", typeof(int));
    
            var minBidParameter = minBid.HasValue ?
                new ObjectParameter("MinBid", minBid) :
                new ObjectParameter("MinBid", typeof(int));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_Season_Insert", seasonNameParameter, draftDateParameter, startPointsParameter, minBidParameter, activeParameter);
        }
    
        public virtual ObjectResult<sp_Season_Select_Result> sp_Season_Select(Nullable<int> seasonID)
        {
            var seasonIDParameter = seasonID.HasValue ?
                new ObjectParameter("SeasonID", seasonID) :
                new ObjectParameter("SeasonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Season_Select_Result>("sp_Season_Select", seasonIDParameter);
        }
    
        public virtual int sp_Season_Update(Nullable<int> seasonID, string seasonName, Nullable<System.DateTime> draftDate, Nullable<int> startPoints, Nullable<int> minBid, Nullable<bool> active)
        {
            var seasonIDParameter = seasonID.HasValue ?
                new ObjectParameter("SeasonID", seasonID) :
                new ObjectParameter("SeasonID", typeof(int));
    
            var seasonNameParameter = seasonName != null ?
                new ObjectParameter("SeasonName", seasonName) :
                new ObjectParameter("SeasonName", typeof(string));
    
            var draftDateParameter = draftDate.HasValue ?
                new ObjectParameter("DraftDate", draftDate) :
                new ObjectParameter("DraftDate", typeof(System.DateTime));
    
            var startPointsParameter = startPoints.HasValue ?
                new ObjectParameter("StartPoints", startPoints) :
                new ObjectParameter("StartPoints", typeof(int));
    
            var minBidParameter = minBid.HasValue ?
                new ObjectParameter("MinBid", minBid) :
                new ObjectParameter("MinBid", typeof(int));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Season_Update", seasonIDParameter, seasonNameParameter, draftDateParameter, startPointsParameter, minBidParameter, activeParameter);
        }
    
        public virtual ObjectResult<sp_Player_Select_Result> sp_Player_Select(Nullable<System.Guid> playerGUID)
        {
            var playerGUIDParameter = playerGUID.HasValue ?
                new ObjectParameter("PlayerGUID", playerGUID) :
                new ObjectParameter("PlayerGUID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Player_Select_Result>("sp_Player_Select", playerGUIDParameter);
        }
    
        public virtual ObjectResult<sp_aspnet_Users_Select_Result> sp_aspnet_Users_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_aspnet_Users_Select_Result>("sp_aspnet_Users_Select");
        }
    
        public virtual int sp_PlayerPosition_Delete(Nullable<System.Guid> playerGUID)
        {
            var playerGUIDParameter = playerGUID.HasValue ?
                new ObjectParameter("PlayerGUID", playerGUID) :
                new ObjectParameter("PlayerGUID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_PlayerPosition_Delete", playerGUIDParameter);
        }
    
        public virtual int sp_PlayerPosition_Insert(Nullable<System.Guid> playerGUID, Nullable<int> primaryPositionID, Nullable<int> secondaryPositionID)
        {
            var playerGUIDParameter = playerGUID.HasValue ?
                new ObjectParameter("PlayerGUID", playerGUID) :
                new ObjectParameter("PlayerGUID", typeof(System.Guid));
    
            var primaryPositionIDParameter = primaryPositionID.HasValue ?
                new ObjectParameter("PrimaryPositionID", primaryPositionID) :
                new ObjectParameter("PrimaryPositionID", typeof(int));
    
            var secondaryPositionIDParameter = secondaryPositionID.HasValue ?
                new ObjectParameter("SecondaryPositionID", secondaryPositionID) :
                new ObjectParameter("SecondaryPositionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_PlayerPosition_Insert", playerGUIDParameter, primaryPositionIDParameter, secondaryPositionIDParameter);
        }
    
        public virtual ObjectResult<sp_PlayerPosition_Select_Result> sp_PlayerPosition_Select(Nullable<System.Guid> playerGUID)
        {
            var playerGUIDParameter = playerGUID.HasValue ?
                new ObjectParameter("PlayerGUID", playerGUID) :
                new ObjectParameter("PlayerGUID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PlayerPosition_Select_Result>("sp_PlayerPosition_Select", playerGUIDParameter);
        }
    
        public virtual int sp_PlayerPosition_Update(Nullable<System.Guid> playerGUID, Nullable<int> primaryPositionID, Nullable<int> secondaryPositionID)
        {
            var playerGUIDParameter = playerGUID.HasValue ?
                new ObjectParameter("PlayerGUID", playerGUID) :
                new ObjectParameter("PlayerGUID", typeof(System.Guid));
    
            var primaryPositionIDParameter = primaryPositionID.HasValue ?
                new ObjectParameter("PrimaryPositionID", primaryPositionID) :
                new ObjectParameter("PrimaryPositionID", typeof(int));
    
            var secondaryPositionIDParameter = secondaryPositionID.HasValue ?
                new ObjectParameter("SecondaryPositionID", secondaryPositionID) :
                new ObjectParameter("SecondaryPositionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_PlayerPosition_Update", playerGUIDParameter, primaryPositionIDParameter, secondaryPositionIDParameter);
        }
    
        public virtual ObjectResult<sp_Position_Select_Result> sp_Position_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Position_Select_Result>("sp_Position_Select");
        }
    
        public virtual int sp_PositionType_Delete(Nullable<int> positionTypeID)
        {
            var positionTypeIDParameter = positionTypeID.HasValue ?
                new ObjectParameter("PositionTypeID", positionTypeID) :
                new ObjectParameter("PositionTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_PositionType_Delete", positionTypeIDParameter);
        }
    
        public virtual int sp_PositionType_Insert(string positionTypeDescr)
        {
            var positionTypeDescrParameter = positionTypeDescr != null ?
                new ObjectParameter("PositionTypeDescr", positionTypeDescr) :
                new ObjectParameter("PositionTypeDescr", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_PositionType_Insert", positionTypeDescrParameter);
        }
    
        public virtual int sp_PositionType_Update(Nullable<int> positionTypeID, string positionTypeDescr)
        {
            var positionTypeIDParameter = positionTypeID.HasValue ?
                new ObjectParameter("PositionTypeID", positionTypeID) :
                new ObjectParameter("PositionTypeID", typeof(int));
    
            var positionTypeDescrParameter = positionTypeDescr != null ?
                new ObjectParameter("PositionTypeDescr", positionTypeDescr) :
                new ObjectParameter("PositionTypeDescr", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_PositionType_Update", positionTypeIDParameter, positionTypeDescrParameter);
        }
    
        public virtual int sp_SeasonPlayer_delete(Nullable<int> seasonID, Nullable<System.Guid> playerGUID)
        {
            var seasonIDParameter = seasonID.HasValue ?
                new ObjectParameter("SeasonID", seasonID) :
                new ObjectParameter("SeasonID", typeof(int));
    
            var playerGUIDParameter = playerGUID.HasValue ?
                new ObjectParameter("PlayerGUID", playerGUID) :
                new ObjectParameter("PlayerGUID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SeasonPlayer_delete", seasonIDParameter, playerGUIDParameter);
        }
    
        public virtual int sp_SeasonPlayer_deleteAll(Nullable<int> seasonID, Nullable<int> positionID)
        {
            var seasonIDParameter = seasonID.HasValue ?
                new ObjectParameter("SeasonID", seasonID) :
                new ObjectParameter("SeasonID", typeof(int));
    
            var positionIDParameter = positionID.HasValue ?
                new ObjectParameter("PositionID", positionID) :
                new ObjectParameter("PositionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SeasonPlayer_deleteAll", seasonIDParameter, positionIDParameter);
        }
    
        public virtual int sp_SeasonPlayer_Insert(Nullable<int> seasonID, Nullable<System.Guid> playerGUID)
        {
            var seasonIDParameter = seasonID.HasValue ?
                new ObjectParameter("SeasonID", seasonID) :
                new ObjectParameter("SeasonID", typeof(int));
    
            var playerGUIDParameter = playerGUID.HasValue ?
                new ObjectParameter("PlayerGUID", playerGUID) :
                new ObjectParameter("PlayerGUID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SeasonPlayer_Insert", seasonIDParameter, playerGUIDParameter);
        }
    
        public virtual ObjectResult<sp_SeasonPlayerBySeason_Remaining_Result> sp_SeasonPlayerBySeason_Remaining(Nullable<int> seasonID, Nullable<int> positionID)
        {
            var seasonIDParameter = seasonID.HasValue ?
                new ObjectParameter("SeasonID", seasonID) :
                new ObjectParameter("SeasonID", typeof(int));
    
            var positionIDParameter = positionID.HasValue ?
                new ObjectParameter("PositionID", positionID) :
                new ObjectParameter("PositionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SeasonPlayerBySeason_Remaining_Result>("sp_SeasonPlayerBySeason_Remaining", seasonIDParameter, positionIDParameter);
        }
    
        public virtual ObjectResult<sp_SeasonPlayerBySeason_Selected_Result> sp_SeasonPlayerBySeason_Selected(Nullable<int> seasonID, Nullable<int> positionID)
        {
            var seasonIDParameter = seasonID.HasValue ?
                new ObjectParameter("SeasonID", seasonID) :
                new ObjectParameter("SeasonID", typeof(int));
    
            var positionIDParameter = positionID.HasValue ?
                new ObjectParameter("PositionID", positionID) :
                new ObjectParameter("PositionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SeasonPlayerBySeason_Selected_Result>("sp_SeasonPlayerBySeason_Selected", seasonIDParameter, positionIDParameter);
        }
    
        public virtual int sp_SeasonPlayerPositionStat_DeleteAll(Nullable<int> seasonID, Nullable<System.Guid> playerGUID)
        {
            var seasonIDParameter = seasonID.HasValue ?
                new ObjectParameter("SeasonID", seasonID) :
                new ObjectParameter("SeasonID", typeof(int));
    
            var playerGUIDParameter = playerGUID.HasValue ?
                new ObjectParameter("PlayerGUID", playerGUID) :
                new ObjectParameter("PlayerGUID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SeasonPlayerPositionStat_DeleteAll", seasonIDParameter, playerGUIDParameter);
        }
    
        public virtual int sp_SeasonPlayerPositionStat_Insert(Nullable<int> seasonID, Nullable<System.Guid> playerGUID, Nullable<int> positionID, Nullable<int> statID, string statValue)
        {
            var seasonIDParameter = seasonID.HasValue ?
                new ObjectParameter("SeasonID", seasonID) :
                new ObjectParameter("SeasonID", typeof(int));
    
            var playerGUIDParameter = playerGUID.HasValue ?
                new ObjectParameter("PlayerGUID", playerGUID) :
                new ObjectParameter("PlayerGUID", typeof(System.Guid));
    
            var positionIDParameter = positionID.HasValue ?
                new ObjectParameter("PositionID", positionID) :
                new ObjectParameter("PositionID", typeof(int));
    
            var statIDParameter = statID.HasValue ?
                new ObjectParameter("StatID", statID) :
                new ObjectParameter("StatID", typeof(int));
    
            var statValueParameter = statValue != null ?
                new ObjectParameter("StatValue", statValue) :
                new ObjectParameter("StatValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SeasonPlayerPositionStat_Insert", seasonIDParameter, playerGUIDParameter, positionIDParameter, statIDParameter, statValueParameter);
        }
    
        public virtual int sp_SeasonPlayerRecycle_deleteAll(Nullable<int> seasonID)
        {
            var seasonIDParameter = seasonID.HasValue ?
                new ObjectParameter("SeasonID", seasonID) :
                new ObjectParameter("SeasonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SeasonPlayerRecycle_deleteAll", seasonIDParameter);
        }
    
        public virtual int sp_SeasonPlayerRecycle_Insert(Nullable<int> seasonID, Nullable<System.Guid> playerGUID)
        {
            var seasonIDParameter = seasonID.HasValue ?
                new ObjectParameter("SeasonID", seasonID) :
                new ObjectParameter("SeasonID", typeof(int));
    
            var playerGUIDParameter = playerGUID.HasValue ?
                new ObjectParameter("PlayerGUID", playerGUID) :
                new ObjectParameter("PlayerGUID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SeasonPlayerRecycle_Insert", seasonIDParameter, playerGUIDParameter);
        }
    
        public virtual int sp_SeasonStadium_DeleteAll(Nullable<int> seasonID)
        {
            var seasonIDParameter = seasonID.HasValue ?
                new ObjectParameter("SeasonID", seasonID) :
                new ObjectParameter("SeasonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SeasonStadium_DeleteAll", seasonIDParameter);
        }
    
        public virtual int sp_SeasonStadium_Insert(Nullable<int> seasonID, Nullable<int> stadiumID)
        {
            var seasonIDParameter = seasonID.HasValue ?
                new ObjectParameter("SeasonID", seasonID) :
                new ObjectParameter("SeasonID", typeof(int));
    
            var stadiumIDParameter = stadiumID.HasValue ?
                new ObjectParameter("StadiumID", stadiumID) :
                new ObjectParameter("StadiumID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SeasonStadium_Insert", seasonIDParameter, stadiumIDParameter);
        }
    
        public virtual ObjectResult<sp_SeasonStadiumBySeason_Remaining_Result> sp_SeasonStadiumBySeason_Remaining(Nullable<int> seasonID)
        {
            var seasonIDParameter = seasonID.HasValue ?
                new ObjectParameter("SeasonID", seasonID) :
                new ObjectParameter("SeasonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SeasonStadiumBySeason_Remaining_Result>("sp_SeasonStadiumBySeason_Remaining", seasonIDParameter);
        }
    
        public virtual ObjectResult<sp_SeasonStadiumBySeason_Selected_Result> sp_SeasonStadiumBySeason_Selected(Nullable<int> seasonID)
        {
            var seasonIDParameter = seasonID.HasValue ?
                new ObjectParameter("SeasonID", seasonID) :
                new ObjectParameter("SeasonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SeasonStadiumBySeason_Selected_Result>("sp_SeasonStadiumBySeason_Selected", seasonIDParameter);
        }
    
        public virtual ObjectResult<sp_SeasonTeamBySeason_Remaining_Result> sp_SeasonTeamBySeason_Remaining(Nullable<int> seasonID)
        {
            var seasonIDParameter = seasonID.HasValue ?
                new ObjectParameter("SeasonID", seasonID) :
                new ObjectParameter("SeasonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SeasonTeamBySeason_Remaining_Result>("sp_SeasonTeamBySeason_Remaining", seasonIDParameter);
        }
    
        public virtual ObjectResult<sp_SeasonTeamBySeason_Selected_Result> sp_SeasonTeamBySeason_Selected(Nullable<int> seasonID)
        {
            var seasonIDParameter = seasonID.HasValue ?
                new ObjectParameter("SeasonID", seasonID) :
                new ObjectParameter("SeasonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SeasonTeamBySeason_Selected_Result>("sp_SeasonTeamBySeason_Selected", seasonIDParameter);
        }
    
        public virtual int sp_SeasonTeamDraft_Dynamic_Select(Nullable<int> seasonID, Nullable<int> positionTypeID)
        {
            var seasonIDParameter = seasonID.HasValue ?
                new ObjectParameter("SeasonID", seasonID) :
                new ObjectParameter("SeasonID", typeof(int));
    
            var positionTypeIDParameter = positionTypeID.HasValue ?
                new ObjectParameter("PositionTypeID", positionTypeID) :
                new ObjectParameter("PositionTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SeasonTeamDraft_Dynamic_Select", seasonIDParameter, positionTypeIDParameter);
        }
    
        public virtual ObjectResult<sp_SeasonTeamDraft_Select_Result> sp_SeasonTeamDraft_Select(Nullable<int> seasonID)
        {
            var seasonIDParameter = seasonID.HasValue ?
                new ObjectParameter("SeasonID", seasonID) :
                new ObjectParameter("SeasonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SeasonTeamDraft_Select_Result>("sp_SeasonTeamDraft_Select", seasonIDParameter);
        }
    
        public virtual int sp_Stadium_Delete(Nullable<int> stadiumID)
        {
            var stadiumIDParameter = stadiumID.HasValue ?
                new ObjectParameter("StadiumID", stadiumID) :
                new ObjectParameter("StadiumID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Stadium_Delete", stadiumIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_Stadium_Insert(string stadiumName, byte[] stadiumImage, Nullable<bool> active_Flg)
        {
            var stadiumNameParameter = stadiumName != null ?
                new ObjectParameter("StadiumName", stadiumName) :
                new ObjectParameter("StadiumName", typeof(string));
    
            var stadiumImageParameter = stadiumImage != null ?
                new ObjectParameter("StadiumImage", stadiumImage) :
                new ObjectParameter("StadiumImage", typeof(byte[]));
    
            var active_FlgParameter = active_Flg.HasValue ?
                new ObjectParameter("Active_Flg", active_Flg) :
                new ObjectParameter("Active_Flg", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_Stadium_Insert", stadiumNameParameter, stadiumImageParameter, active_FlgParameter);
        }
    
        public virtual ObjectResult<sp_Stadium_Select_Result> sp_Stadium_Select(Nullable<int> stadiumID)
        {
            var stadiumIDParameter = stadiumID.HasValue ?
                new ObjectParameter("StadiumID", stadiumID) :
                new ObjectParameter("StadiumID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Stadium_Select_Result>("sp_Stadium_Select", stadiumIDParameter);
        }
    
        public virtual int sp_Stadium_Update(Nullable<int> stadiumID, string stadiumName, Nullable<bool> active_Flg, byte[] stadiumImage)
        {
            var stadiumIDParameter = stadiumID.HasValue ?
                new ObjectParameter("StadiumID", stadiumID) :
                new ObjectParameter("StadiumID", typeof(int));
    
            var stadiumNameParameter = stadiumName != null ?
                new ObjectParameter("StadiumName", stadiumName) :
                new ObjectParameter("StadiumName", typeof(string));
    
            var active_FlgParameter = active_Flg.HasValue ?
                new ObjectParameter("Active_Flg", active_Flg) :
                new ObjectParameter("Active_Flg", typeof(bool));
    
            var stadiumImageParameter = stadiumImage != null ?
                new ObjectParameter("StadiumImage", stadiumImage) :
                new ObjectParameter("StadiumImage", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Stadium_Update", stadiumIDParameter, stadiumNameParameter, active_FlgParameter, stadiumImageParameter);
        }
    
        public virtual ObjectResult<sp_StadiumDraft_Select_Result> sp_StadiumDraft_Select(Nullable<int> seasonID, Nullable<System.Guid> userID)
        {
            var seasonIDParameter = seasonID.HasValue ?
                new ObjectParameter("SeasonID", seasonID) :
                new ObjectParameter("SeasonID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_StadiumDraft_Select_Result>("sp_StadiumDraft_Select", seasonIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<DraftPositionStatus_Result> DraftPositionStatus(Nullable<int> seasonID)
        {
            var seasonIDParameter = seasonID.HasValue ?
                new ObjectParameter("SeasonID", seasonID) :
                new ObjectParameter("SeasonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DraftPositionStatus_Result>("DraftPositionStatus", seasonIDParameter);
        }
    
        public virtual ObjectResult<sp_Team_Select_Result> sp_Team_Select(Nullable<int> teamID)
        {
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Team_Select_Result>("sp_Team_Select", teamIDParameter);
        }
    
        public virtual int sp_TradeData_Select(Nullable<int> seasonID, Nullable<System.Guid> tradeGUID)
        {
            var seasonIDParameter = seasonID.HasValue ?
                new ObjectParameter("SeasonID", seasonID) :
                new ObjectParameter("SeasonID", typeof(int));
    
            var tradeGUIDParameter = tradeGUID.HasValue ?
                new ObjectParameter("TradeGUID", tradeGUID) :
                new ObjectParameter("TradeGUID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_TradeData_Select", seasonIDParameter, tradeGUIDParameter);
        }
    
        public virtual ObjectResult<DraftPlayerStatus_Result> DraftPlayerStatus(Nullable<int> seasonID)
        {
            var seasonIDParameter = seasonID.HasValue ?
                new ObjectParameter("SeasonID", seasonID) :
                new ObjectParameter("SeasonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DraftPlayerStatus_Result>("DraftPlayerStatus", seasonIDParameter);
        }
    
        public virtual ObjectResult<PickAPlayer_Result> PickAPlayer(Nullable<int> seasonID)
        {
            var seasonIDParameter = seasonID.HasValue ?
                new ObjectParameter("SeasonID", seasonID) :
                new ObjectParameter("SeasonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PickAPlayer_Result>("PickAPlayer", seasonIDParameter);
        }
    
        public virtual ObjectResult<GetSeasonTeamOrder_Result> GetSeasonTeamOrder(Nullable<int> seasonID)
        {
            var seasonIDParameter = seasonID.HasValue ?
                new ObjectParameter("SeasonID", seasonID) :
                new ObjectParameter("SeasonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSeasonTeamOrder_Result>("GetSeasonTeamOrder", seasonIDParameter);
        }
    
        public virtual ObjectResult<DraftPlayersStatus_Result> DraftPlayersStatus(Nullable<int> seasonID, Nullable<int> primaryPositionID, Nullable<bool> drafted)
        {
            var seasonIDParameter = seasonID.HasValue ?
                new ObjectParameter("SeasonID", seasonID) :
                new ObjectParameter("SeasonID", typeof(int));
    
            var primaryPositionIDParameter = primaryPositionID.HasValue ?
                new ObjectParameter("PrimaryPositionID", primaryPositionID) :
                new ObjectParameter("PrimaryPositionID", typeof(int));
    
            var draftedParameter = drafted.HasValue ?
                new ObjectParameter("Drafted", drafted) :
                new ObjectParameter("Drafted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DraftPlayersStatus_Result>("DraftPlayersStatus", seasonIDParameter, primaryPositionIDParameter, draftedParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_Stat_Insert(string statName, Nullable<int> positionTypeID)
        {
            var statNameParameter = statName != null ?
                new ObjectParameter("StatName", statName) :
                new ObjectParameter("StatName", typeof(string));
    
            var positionTypeIDParameter = positionTypeID.HasValue ?
                new ObjectParameter("PositionTypeID", positionTypeID) :
                new ObjectParameter("PositionTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_Stat_Insert", statNameParameter, positionTypeIDParameter);
        }
    
        public virtual ObjectResult<sp_Team_Roster_Select_Result> sp_Team_Roster_Select(Nullable<int> seasonID, Nullable<int> teamID)
        {
            var seasonIDParameter = seasonID.HasValue ?
                new ObjectParameter("SeasonID", seasonID) :
                new ObjectParameter("SeasonID", typeof(int));
    
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Team_Roster_Select_Result>("sp_Team_Roster_Select", seasonIDParameter, teamIDParameter);
        }
    }
}
